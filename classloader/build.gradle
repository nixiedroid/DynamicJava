import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.4.2'
    }
}

plugins {
    id 'application'
}


java {
    group = 'com.nixiedroid'
    version = 'unspecified'
}

def preMainDir = DEFAULT_BUILD_DIR_NAME + "/libs/" + project.name + ".jar"
def preMainClass = "com.nixiedroid.Premain"

application  {
    mainClass = "com.nixiedroid.Main"
    applicationDefaultJvmArgs = ["-javaagent:" + preMainDir]
}


jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": version,
                "Main-Class": application.mainClass,
                "Premain-class" : preMainClass
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // https://mvnrepository.com/artifact/org.apache.bcel/bcel
    implementation 'org.apache.bcel:bcel:6.8.2'

    //implementation project(':plugin')
    // runtimeOnly project (':plugin2')

}
tasks.register('shrinkJar', ProGuardTask) {
    configuration file('proguard-rules.pro')

    injars(tasks.named('jar', Jar).flatMap { it.archiveFile })

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        //libraryjars "${System.getProperty('java.home')}/jmods/....."
    }

    verbose

    outjars(layout.buildDirectory.file("libs/classloader-minified.jar"))
}

test {
    useJUnitPlatform()
}